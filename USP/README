# Curso de Ciencias de Dados USP

Projeto que tem por objetivo a criação de um Aplicativo do Conselho Regional de Fisioterapia e Terapia Ocupacional do Maranhão - CREFITO16.

## 🚀Iniciando

As seguintes instruções irão ajudá-lo a obter uma cópia do projeto em funcionamento na sua máquina local para fins de desenvolvimento e teste.

##  📋 Pré-requisitos

Para rodar este projeto, é necessário ter instalado em sua máquina uma versão estável do Node.js. A versão recomendada é:

  ```
  - node v20.12.1^
  ```

Certifique-se de que o Node.js está corretamente instalado e atualizado em sua máquina antes de prosseguir com a instalação e execução do projeto, para isso, use este comando no terminal de sua maquina:

  ```
  node -v
  ```
Ter o Git e uma conta no Github para realizar controle de versão.

Caso seja usuario de distribuições Linux ou de sistema IOS, instale o [Watchman](https://facebook.github.io/watchman/)

## 🔧 Clonando o repositório

Aqui estão alguns exemplos passo-a-passo que você pode seguir se quiser testar a aplicação em seu dispositivo:

- Primeiro, você precisa clonar o repositório. Abra o terminal e digite o seguinte comando:
  ```
  git clone https://github.com/smart-creative-solutions/crefito-frontend
  ```
  
- Após clonar o repositório, você precisa acessar a pasta do projeto. No terminal, digite o seguinte comando:
  ```
  cd crefito-frontend
  ```
- Agora, você pode instalar todas as dependências necessárias para o projeto com o seguinte comando:
  ```
  npm install
  ```
  
Este comando irá ler o arquivo package.json na pasta do projeto e instalar todas as dependências listadas lá. Após a instalação das dependências, você deve ser capaz de executar a aplicação sem problemas. Se você encontrar algum problema, verifique se o Node.js e o npm estão atualizados em sua máquina

## 🌳 Subindo o Projeto no GitHub

- Acessando a branch principal
  ```
  git checkout main
  ```
  
- Confirmar se a branch está atualizada
  ```
  git pull origin main
  ```
  
- Criar uma nova branch. Substitua nome-da-branch pelo nome que você deseja dar à sua branch:
  ```
  git branch nome-da-branch
  ```

- Mudar para a nova branch:
  ```
  git checkout nome-da-branch
  ```  

Após ser feitos alterações do código ou configurações de ambiente de desenvolvimento você já poderá fazer o commit, seguindo os seguintes passos:

- Adicionar as alterações no diretório e subdiretório ao índice do git
  ```
  git add .
  ```
- Commitando as alterações, além de identificar quem realizou o commit
  ```
  git commit -m “mensagem de commit” --author=”Nome do Autor <emaildoautor@exemple.com>”
  ```
  
- Subindo alterações para a branch criada
  ```
  git push origin nome-da-branch
  ```

## ▶ Criando a Aplicação
Para criar a aplicação utilizando o Expo, basta seguir estes passos:

- Digite esse comando no terminal de sua maquina, de preferêcia dentro de uma pasta especifica para a aplicação
  ```
  npx create-expo-app nome-da-aplicacao
  ```
- Entre na pasta que foi criada:
  ```
  cd nome-da-aplicacao
  ```
- Agora você já pode executar a aplicação (você pode ver como faz no topico ⚙️ Executando a Aplicação).

  
## 👨‍💻 Configurando ESLint

Instalar o ESLint: O ESLint é uma ferramenta de linting para JavaScript que pode ajudar a encontrar e corrigir problemas no seu código. Você pode instalá-lo em seu projeto com o seguinte comando:
  ```
  npm install eslint --save-dev
  ```

Configurar o ESLint: Depois de instalar o ESLint, você precisa configurá-lo para o seu projeto. Isso é feito com o comando __*npx eslint --init*__. Durante a configuração, você será solicitado a responder algumas perguntas:

- Verificar a indentação e a sintaxe do código para corrigir erros: Isso permite que o ESLint verifique a formatação do seu código, além de possíveis erros de sintaxe.

- Módulos import e export: Isso permite que o ESLint verifique o uso correto dos módulos import e export no seu código.

- Framework usado: Neste caso, você selecionou React. Isso configura o ESLint para verificar o código específico do React.

- Typescript: Isso permite que o ESLint verifique o código TypeScript.

- Ambiente Node: Isso configura o ESLint para verificar o código que será executado em um ambiente Node.js.

- Padrão de uso: Aqui você pode escolher usar uma configuração padrão ou criar a sua própria.

- Instalação com npm: Isso instala as dependências necessárias usando o npm.

- Instalar o plugin do React-Native: Finalmente, você precisa instalar um plugin ESLint para React Native. Isso permite que o ESLint verifique o código específico do React Native. Você pode fazer isso com o seguinte comando:
npm install --save-dev eslint-plugin-react-native

## ⚙️ Executando a Aplicação:

Existem duas maneiras de iniciar a aplicação React Native usando Expo para testes:

- No Android Studio: Se você já tem o Android Studio instalado em sua máquina, basta abrir o terminal dentro da sua IDE e digitar o seguinte comando:
  ```
  npm run android
  ```
- Em ambos: Para iniciar a aplicação de forma geral, permitindo acesso através do dispositivo móvel ou do Android Studio, digite o seguinte comando:
  ```
  npx expo start
  ```
  
Após executar este comando, um menu de opções será exibido junto com um QR Code. Você pode escanear este QR Code com o aplicativo Expo Go instalado em seu dispositivo móvel para testar a aplicação. Ou pressionar a tecla A abrir no Android Studio.

## 🛠️ Construído com as seguintes ferramentas:

Este sistema foi desenvolvido utilizando uma variedade de ferramentas de alta qualidade:

* [React Native](https://reactnative.dev/): Uma biblioteca robusta usada para o desenvolvimento de interfaces de usuário.
* [Expo](https://expo.dev/): Ferramenta que permite aos desenvolvedores criar e entregar aplicativos universais em JavaScript para iOS e Android.
* [TypeScript](https://www.typescriptlang.org/): Linguagem de programação que adiciona tipagem estática e outros recursos ao JavaScript.
* [React Navigation](https://reactnavigation.org/): Ferramenta essencial para a implementação de navegação dentro da aplicação.
* [Styled-Components](https://styled-components.com/): Utilizado para a criação de estilos CSS em componentes JavaScript.

## ✒️ Autores

Colaboradores do projeto

* **Rodrigo Costa** - [Lider de Front-End](https://github.com/costrodrigo22)
* **Walysson Cavalcante** - [Desenvolvedor](https://github.com/AkiroSetonai)
* **Gregoly Silva** - [Desenvolvedor](https://github.com/gregoly-silva)
* **Kauã Cantanhede** - [Desenvolvedor](https://github.com/KauaCantanhedeSantos)
* **Hiago Borgaço** - [Desenvolvedor](https://github.com/HiagoDB)
* **Lucas Vinícios** - [Desenvolvedor](https://github.com/viniciuslucas)

## 📄 Licença

Este projeto está sob domínio da Faculdade de Imperatriz (Facimp) 

---

